@implements IDisposable
@inject StateContainer stateContainer;

@if (stateContainer.ShouldShowOverlay)
{
    <div>
        @if (AllowClosure)
        {
            <div class="overlay-outer" @onclick=Close />
        }
        else
        {
            <div class="overlay-outer" />
        }
        <aside class="overlay-inner">
            <div class="overlay-title">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h1>@Title</h1>
                }
                @if (AllowClosure)
                {
                    <button class="button button-invisible overlay-close-button"
                    @onclick=Close>
                        X
                    </button>
                }
            </div>
            <div class="overlay-content">
                @ChildContent
            </div>
        </aside>
    </div>
}

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public bool AllowClosure { get; set; } = true;
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override void OnInitialized()
    {
        stateContainer.OnChange += StateHasChanged;
    }

    /// <summary>
    /// Close the dialog.
    /// </summary>
    public void Close()
    {
        stateContainer.SelectedOverlay = SelectedOverlay.None;
    }

    public void Dispose()
    {
        stateContainer.OnChange -= StateHasChanged;
    }
}