@inject IDiaryService diaryService;

<MudTextField Variant="Variant.Filled"
              Value="DiarySection.Title"
              Label="Title"
              DebounceInterval="debounceTimeMilleseconds"
              T="string"
              ValueChanged="OnTitleUpdatedAsync"
              Lines="1" />
<MudTextField Variant="Variant.Filled"
              Value="DiarySection.Body"
              Label="Body"
              DebounceInterval="debounceTimeMilleseconds"
              T="string"
              ValueChanged="OnBodyUpdatedAsync"
              Lines="5" />
<MudButton Variant="Variant.Filled"
           OnClick="RemoveSectionAsync"
           Color="Color.Primary">
    Delete Section
</MudButton>

@code {
    [Parameter]
    public DateOnly Date { get; set; }
    [Parameter]
    public DiarySection DiarySection { get; set; }

    private const int debounceTimeMilleseconds = 2000;

    /// <summary>
    /// On title text box update, update diary file.
    /// Updates are generated when user leaves title text box
    /// or sits for 2 seconds.
    /// </summary>
    /// <param name="title">Updated title text</param>
    protected async Task OnTitleUpdatedAsync(string title)
    {
        DiarySection.Title = title;
        await diaryService.UpsertSection(Date, DiarySection, false);
    }

    /// <summary>
    /// On title text box update, update diary file.
    /// Updates are generated when user leaves body text box
    /// or sits for 2 seconds.
    /// </summary>
    /// <param name="body">Updated body text</param>
    protected async Task OnBodyUpdatedAsync(string body)
    {
        DiarySection.Body = body;
        await diaryService.UpsertSection(Date, DiarySection, false);
    }

    protected async Task RemoveSectionAsync()
    {
        await diaryService.RemoveDiarySectionAsync(Date, DiarySection.SectionId);
    }
}
