@implements IDisposable
@inject IDiaryService DiaryService
@inject IFolderPicker FolderPicker
@inject IDialogService DialogService
@inject StateContainer StateContainer

@if (!StartingDialog)
{
    <MudText><strong>Diary Location</strong></MudText>
}
<div class="d-flex">
    <MudTextField
        Value="filePath"
        Variant="Variant.Filled"
        Label="File Path"
        @onclick="@SelectFile"
        Class="mr-4" />
    <MudButton
        Variant="Variant.Filled"
        OnClick="SelectFile"
        Color="Color.Primary" >
        Select
    </MudButton>
</div>

@code {
    [Parameter]
    public bool StartingDialog { get; set; } = false;
    [Parameter]
    public EventCallback OnDiarySelected { get; set; }

    private string filePath;

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
        filePath = Preferences.Default.Get(PreferenceKeys.DiaryFile, string.Empty);
    }

    private async Task SelectFile()
    {
        try
        {
            var result = await FolderPicker.PickAsync(CancellationToken.None);
            if (result.IsSuccessful)
            {
                Preferences.Set(PreferenceKeys.DiaryFile, $"{result.Folder.Path}\\multi-diary.txt");
                var diaryFileSelected = await DiaryService.GetDiariesAsync();

                if (StateContainer.Error == DiaryErrorConstants.FileNotFound)
                {
                    diaryFileSelected = await ConfirmAsync();
                }

                if (diaryFileSelected)
                {
                    await OnDiarySelected.InvokeAsync();
                }
            }
        }
        catch (Exception) // The user canceled or something went wrong.
        {

        }
    }

    /// <summary>
    /// Confirm the section should be deleted and delete if desired.
    /// </summary>
    private async Task<bool> ConfirmAsync()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "This will create a new file to store diary information. Continue?" },
            { "ButtonText", "Continue" },
            { "Color", Color.Primary },
            { "ShowCancelButton", true }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<SimpleDialog>("Continue", parameters, options);
        var result = await dialog.Result;
        dialog.Close();

        if (result.Canceled || !(bool)result.Data)
        {
            return false;
        }
        await DiaryService.CreateDiaryAsync();
        return true;
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
