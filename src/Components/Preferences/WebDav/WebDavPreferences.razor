@inject IDiaryService DiaryService
@inject StateContainer StateContainer
@inject IPreferences Preferences
@inject ISecureStorage SecureStorage
@inject IWebDavService WebDavService
@inject ISnackbar Snackbar
@implements IDisposable

<MudText><strong>WebDav Syncing</strong></MudText>
<MudExpansionPanels>
    <MudExpansionPanel Text="WebDav Syncing Settings">
        <MudCheckBox @bind-Checked="UseWebDav"
                     Color="Color.Primary"
                     Label="Sync via WebDAV" />
        <MudTextField Disabled="@(!UseWebDav)"
                      Label="Host"
                      Value="WebDavHost"
                      InputType="InputType.Url"
                      Variant="Variant.Filled"
                      T="string"
                      ValueChanged="SetWebDavHost" />
        <MudTextField Disabled="@(!UseWebDav)"
                      Label="Username"
                      Value="WebDavUsername"
                      Variant="Variant.Filled"
                      T="string"
                      ValueChanged="SetWebDavUsername" />
        <MudTextField Disabled="@(!UseWebDav)"
                      Label="Password"
                      Value="WebDavPassword"
                      Variant="Variant.Filled"
                      InputType="@passwordInputType"
                      Adornment="Adornment.End"
                      AdornmentIcon="@passwordInputIcon"
                      OnAdornmentClick="OnPasswordButtonClicked"
                      AdornmentAriaLabel="Show Password"
                      T="string"
                      ValueChanged="SetWebDavPassword" />
        <MudButton Color="Color.Primary"
                   OnClick="TestConnectionAsync"
                   Class="ma-2">
            Test Connection
        </MudButton>
        <MudText>@connectionDetails</MudText>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    private bool UseWebDav
    {
        get => Preferences.Get(PreferenceKeys.WebDavUseWebDav, false);
        set => Preferences.Set(PreferenceKeys.WebDavUseWebDav, value);
    }

    private string WebDavHost { get; set; }
    private string WebDavUsername { get; set; }
    private string WebDavPassword { get; set; }

    private bool showPassword = false;
    private InputType passwordInputType = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string connectionDetails = string.Empty;

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;

        WebDavHost = await SecureStorage.GetSecureValueOrDefaultAsync(PreferenceKeys.WebDavHost);
        WebDavUsername = await SecureStorage.GetSecureValueOrDefaultAsync(PreferenceKeys.WebDavUsername);
        WebDavPassword = await SecureStorage.GetSecureValueOrDefaultAsync(PreferenceKeys.WebDavPassword);
    }

    /// <summary>
    /// Toggles the visibility of the password textbox contents.
    /// </summary>
    private void OnPasswordButtonClicked()
    {
        showPassword = !showPassword;
        passwordInputType = showPassword ? InputType.Text : InputType.Password;
        passwordInputIcon = showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    /// <summary>
    /// Sets the host for WebDav on the page and in secure storage.
    /// </summary>
    private async Task SetWebDavHost(string value)
    {
        WebDavHost = value;
        await SecureStorage.SetAsync(PreferenceKeys.WebDavHost, value);
    }

    /// <summary>
    /// Sets the username for WebDav on the page and in secure storage.
    /// </summary>
    private async Task SetWebDavUsername(string value)
    {
        WebDavUsername = value;
        await SecureStorage.SetAsync(PreferenceKeys.WebDavUsername, value);
    }

    /// <summary>
    /// Sets the password for WebDav on the page and in secure storage.
    /// </summary>
    private async Task SetWebDavPassword(string value)
    {
        WebDavPassword = value;
        await SecureStorage.SetAsync(PreferenceKeys.WebDavPassword, value);
    }

    /// <summary>
    /// Tests the connection to WebDav based on the options provided by the user.
    /// Displays the results of the test for the user.
    /// </summary>
    private async Task TestConnectionAsync()
    {
        var response = await WebDavService.TestConnectionAsync(WebDavHost, WebDavUsername, WebDavPassword);
        connectionDetails = response.IsSuccessful ? "Connection successful!" : $"Connection to WebDav unsuccessful. Additional details: {response.Description}";
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
