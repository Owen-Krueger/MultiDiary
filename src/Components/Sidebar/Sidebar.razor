@implements IDisposable
@inject IDiaryService DiaryService
@inject IDialogService DialogService
@inject StateContainer StateContainer

<MudDrawer Open="true"
           Variant="DrawerVariant.Persistent"
           Width="320px"
           Height="100vh" >
    <Calendar Dates="Diaries.Entries.Keys" />
    <MudButton Variant="Variant.Filled"
               OnClick="AddSection"
               EndIcon="@Icons.Material.Filled.Add"
               Color="Color.Primary"
               Class="ma-2"
               Disabled="StateContainer.Error != DiaryErrorConstants.None">
        Add Section
    </MudButton>
    @*<div class="position-absolute bottom-0 start-0">*@
    <div class="test">
        <MudIconButton Icon="@Icons.Material.Filled.Settings"
                       aria-label="settings"
                       OnClick="OpenPreferences" 
                       tabindex="-1" />
    </div>
</MudDrawer>

@code {
    [Parameter]
    public DateOnly Date { get; set; }
    [Parameter]
    public Diaries Diaries { get; set; }

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    /// <summary>
    /// Adds a new section to the UI to be edited by the user.
    /// The section will be given an ID of 1 if it's the first
    /// section, or whatever the largest ID is plus 1.
    /// </summary>
    private void AddSection()
    {
        DiaryService.UpsertSection(Date, new DiarySection(), true);
    }

    private void OpenPreferences()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        DialogService.Show<PreferencesDialog>("Preferences", options);
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}