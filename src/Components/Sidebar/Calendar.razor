@implements IDisposable
@inject StateContainer StateContainer

<MudDatePicker
    PickerVariant="PickerVariant.Static"
    AdditionalDateClassesFunc="CheckDate"
    @bind-Date="selectedDateTime"
/>

@code {
    [Parameter]
    public IEnumerable<DateOnly> Dates { get; set; }

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    /// <summary>
    /// Sets selected date in StatesContainer to what the user selects in the UI.
    /// This is needed because the calendar UI exposes a DateTime type, when we
    /// only store a DateOnly type in the state.
    /// </summary>
    private DateTime? selectedDateTime
    {
        get
        {
            return StateContainer.SelectedDate.ToDateTime(TimeOnly.MinValue);
        }
        set
        {
            StateContainer.SelectEntry(DateOnly.FromDateTime(value ?? DateTime.Today));
        }
    }

    /// <summary>
    /// Applies CSS style if the date has diary entries present.
    /// </summary>
    /// <param name="date">Date to check</param>
    /// <returns>CSS style to add to element.</returns>
    private string CheckDate(DateTime date)
    {
        return Dates.Contains(DateOnly.FromDateTime(date)) ? "mud-button-outlined" : string.Empty;
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
