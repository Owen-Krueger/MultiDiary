@implements IDisposable
@inject IDiaryService DiaryService
@inject StateContainer StateContainer

<div class="d-flex flex-column" style="height:96vh; overflow-x:auto;">
    <MudStack>
        <MudExpansionPanels MultiExpansion="true">
            @if (!StateContainer.SelectedSections.Any())
            {
                <MudText Align="Align.Center">No sections here yet... Click "Add Section" on the sidebar to make one!</MudText>
            }
            @foreach(var section in StateContainer.SelectedSections)
            {
                <DiarySectionEdit Date="StateContainer.SelectedDate" DiarySection="section" />
            }
        </MudExpansionPanels>
    </MudStack>
</div>

@code {
    private bool defaultsSet = false;

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!StateContainer.SelectedSections.Any() && StateContainer.Diaries.DefaultSections.Any())
        {
            SetSectionsFromDefault();
            StateHasChanged();
        }
    }

    private void SetSectionsFromDefault()
    {
        int index = 0;
        foreach (var section in StateContainer.Diaries.DefaultSections)
        {
            index++;
            StateContainer.SelectedSections.Add(new DiarySection() { SectionId = index, Title = section.DefaultTitle });
        }
        defaultsSet = true;
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
