@implements IDisposable
@inject IDiaryService DiaryService
@inject StateContainer StateContainer

@if (StateContainer.IsLoading)
{
    <Loading />
}
else
{
    <MudStack>
        <MudExpansionPanels MultiExpansion="true">
            @if (!StateContainer.SelectedSections.Any())
            {
                <MudText Align="Align.Center">No sections here yet... Click "Add Section" on the sidebar to make one!</MudText>
            }
            @foreach(var section in StateContainer.SelectedSections)
            {
                <DiarySectionEdit Date="StateContainer.SelectedDate" DiarySection="section" ReadOnlyTitle="IsTitleReadOnly(section.Title)" />
            }
        </MudExpansionPanels>
        @if (OperatingSystem.IsAndroid())
        {
            <ModifyEntryButtons />
        }
    </MudStack>
}

@code {
    /// <summary>
    /// Subscribes to StateContainer changes.
    /// Re-gets diary information from file in case settings have changed.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;
        await DiaryService.GetDiariesAsync();
    }

    /// <summary>
    /// Re-renders UI if dependencies have changed.
    /// Checks if we're on a new page with defaults that should be set.
    /// </summary>
    protected override void OnAfterRender(bool firstRender)
    {
        if (StateContainer.SelectedSections.Any() ||
            !StateContainer.Diaries.DefaultSections.Any() ||
            StateContainer.Diaries.Entries.ContainsKey(StateContainer.SelectedDate))
        {
            return;
        }
        
        SetSectionsFromDefault();
        StateHasChanged();
    }

    /// <summary>
    /// Determines if title text box should be read-only due to preferences set and
    /// text matches a default section.
    /// </summary>
    /// <param name="title">Title textbox content string to check.</param>
    /// <returns>True if textbox should be set as read-only.</returns>
    private bool IsTitleReadOnly(string title) => Preferences.Default.Get(PreferenceKeys.ReadOnlyDefaultSectionTitles, false) && StateContainer.Diaries.DefaultSections.Any(x => x.DefaultTitle == title);

    /// <summary>
    /// Sets section textboxes if default sections set and entry is new.
    /// </summary>
    private void SetSectionsFromDefault()
    {
        var index = 0;
        foreach (var section in StateContainer.Diaries.DefaultSections)
        {
            index++;
            StateContainer.SelectedSections.Add(new DiarySection() { SectionId = index, Title = section.DefaultTitle });
        }
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
