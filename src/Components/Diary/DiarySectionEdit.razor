@implements IDisposable
@inject IDiaryService DiaryService
@inject IDialogService DialogService
@inject StateContainer StateContainer

<MudPaper Class="pa-2">
    <ChildContent>
    <div class="d-flex pa-2">
        @if (!ReadOnlyTitle)
        {
            <MudTextField Value="DiarySection.Title"
                        Label="Title"
                        DebounceInterval="debounceTimeMilleseconds"
                        T="string"
                        ValueChanged="OnTitleUpdatedAsync"
                        Lines="1" />
        }
        else
        {
                <MudGrid Class="d-flex flex-column justify-center">
                    <MudItem>
                    <MudText>@DiarySection.Title</MudText>
                </MudItem>
            </MudGrid>
        }
        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                aria-label="delete"
                OnClick="DeleteSection" 
                tabindex="-1" />
    </div>
    <div class="pa-2">
        <MudTextField Variant="Variant.Filled"
                      Value="DiarySection.Body"
                      Label="Body"
                      DebounceInterval="debounceTimeMilleseconds"
                      T="string"
                      ValueChanged="OnBodyUpdatedAsync"
                      Lines="sectionLineCount" />
    </div>
    </ChildContent>
</MudPaper>

@code {
    [Parameter]
    public DateOnly Date { get; set; }
    [Parameter]
    public DiarySection DiarySection { get; set; }
    [Parameter]
    public bool ReadOnlyTitle { get; set; }

    private const int debounceTimeMilleseconds = 500;
    private int sectionLineCount = 5;

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    /// <summary>
    /// Re-renders UI if dependencies have changed.
    /// </summary>
    protected override void OnAfterRender(bool firstRender)
    {
        if (PreferenceUtilities.GetUpdatedPreference(ref sectionLineCount, PreferenceKeys.SectionLineCount))
        {
            StateHasChanged(); // Needed so the component properly refreshes.
        }
    }

    /// <summary>
    /// On title text box update, update diary file.
    /// Updates are generated when user leaves title text box
    /// or sits for 2 seconds.
    /// </summary>
    /// <param name="title">Updated title text</param>
    protected async Task OnTitleUpdatedAsync(string title)
    {
        DiarySection.Title = title;
        await DiaryService.UpdateDiaryAsync();
    }

    /// <summary>
    /// On title text box update, update diary file.
    /// Updates are generated when user leaves body text box
    /// or sits for 2 seconds.
    /// </summary>
    /// <param name="body">Updated body text</param>
    protected async Task OnBodyUpdatedAsync(string body)
    {
        DiarySection.Body = body;
        await DiaryService.UpdateDiaryAsync();
    }

    /// <summary>
    /// Confirm the section should be deleted and delete if desired.
    /// </summary>
    private async Task DeleteSection()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this section? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        parameters.Add("ShowCancelButton", true);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<SimpleDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && (bool)result.Data)
        {
            StateContainer.RemoveSection(Date, DiarySection.SectionId);
            await DiaryService.UpdateDiaryAsync();
        }
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
