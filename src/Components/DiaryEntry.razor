@implements IDisposable
@inject StateContainer StateContainer

<MudStack>
    @foreach(var section in Sections)
    {
        <DiarySectionEdit Date="Date" DiarySection="section" />
    }
    <MudButton
        Variant="Variant.Filled"
        @onclick="AddSection"
        EndIcon="@Icons.Material.Filled.Add"
        Color="Color.Primary"
    >
        Add Section
    </MudButton>
</MudStack>

@code {
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    private DateOnly Date => StateContainer.SelectedDate;
    private List<DiarySection> Sections => StateContainer.Diaries.Entries.SingleOrDefault(x => x.Key == Date).Value?.DiarySections ?? new List<DiarySection>();

    /// <summary>
    /// Adds a new section to the UI to be edited by the user.
    /// The section will be given an ID of 1 if it's the first
    /// section, or whatever the largest ID is plus 1.
    /// </summary>
    private void AddSection()
    {
        int sectionId = 1;
        if (Sections.Any())
        {
            sectionId = Sections.Max(x => x.SectionId) + 1;
        }
        Sections.Add(new DiarySection(sectionId));
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
