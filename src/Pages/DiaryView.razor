@implements IDisposable
@inject StateContainer StateContainer

<MudDrawerContainer>
    <DiarySidebar Date="Date" Diaries="Diaries" />
    <div class="pa-4">
        <DiaryEntry Date="Date" Sections="SelectedDiarySections" />
    </div>
</MudDrawerContainer>

@code {
    [Parameter]
    public Diaries Diaries { get; set; }

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    private DateOnly Date => StateContainer.SelectedDate;

    /// <summary>
    /// Returns the diary sections for the selected date.
    /// </summary>
    private List<DiarySection> SelectedDiarySections => Diaries.Entries.SingleOrDefault(x => x.Key == StateContainer.SelectedDate).Value?.DiarySections ?? new List<DiarySection>();

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}