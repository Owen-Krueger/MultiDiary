@implements IDisposable
@inject StateContainer StateContainer
@inject IDiaryService DiaryService

<MudDrawerContainer>
    <MudDrawer
        Open="true"
        Variant="DrawerVariant.Persistent"
        Width="320px"
    >
        <Calendar Dates="Diaries.Entries.Keys" />
        <MudButton Variant="Variant.Filled"
                   OnClick="AddSection"
                   EndIcon="@Icons.Material.Filled.Add"
                   Color="Color.Primary"
                   Class="ma-2">
            Add Section
        </MudButton>
    </MudDrawer>
    <div class="pa-4">
        <DiaryEntry Date="Date" Sections="SelectedDiarySections" />
    </div>
</MudDrawerContainer>

@code {
    [Parameter]
    public Diaries Diaries { get; set; }

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    private DateOnly Date => StateContainer.SelectedDate;

    /// <summary>
    /// Returns the diary sections for the selected date.
    /// </summary>
    private List<DiarySection> SelectedDiarySections => Diaries.Entries.SingleOrDefault(x => x.Key == StateContainer.SelectedDate).Value?.DiarySections ?? new List<DiarySection>();

    /// <summary>
    /// Adds a new section to the UI to be edited by the user.
    /// The section will be given an ID of 1 if it's the first
    /// section, or whatever the largest ID is plus 1.
    /// </summary>
    private void AddSection()
    {
        DiaryService.UpsertSection(Date, new DiarySection(), true);
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}