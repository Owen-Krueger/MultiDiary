@implements IDisposable
@inject StateContainer StateContainer

<MudDrawerContainer>
    <MudDrawer
        Open="true"
        Variant="DrawerVariant.Persistent"
        Width="320px"
    >
        <Calendar Dates="Diaries.Entries.Keys" />
    </MudDrawer>
    <MudPaper Class="d-flex flex-column pa-4 overflow-x-auto" Height="100vh">
        <DiaryEntry Date="StateContainer.SelectedDate" Sections="SelectedDiarySections" />
    </MudPaper>
</MudDrawerContainer>

@code {
    [Parameter]
    public Diaries Diaries { get; set; }

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    private List<DiarySection> SelectedDiarySections => Diaries.Entries.SingleOrDefault(x => x.Key == StateContainer.SelectedDate).Value?.DiarySections ?? new List<DiarySection>();

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}