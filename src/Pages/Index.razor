@page "/"
@implements IDisposable
@inject StateContainer StateContainer
@inject IDiaryService DiaryService
@inject IDialogService DialogService

<MudDrawerContainer>
    <Sidebar Date="Date" Diaries="StateContainer.Diaries" />
    <div class="pa-4">
        <DiaryEntry Date="Date" Sections="SelectedDiarySections" />
    </div>
</MudDrawerContainer>

@code {
    /// <summary>
    /// Subscribes to StateContainer changes.
    /// Gets diaries from file.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;
        await DiaryService.GetDiariesAsync();

        string error = StateContainer.Error;
        if (error == DiaryErrorConstants.FileNotFound)
        {
            ShowGettingStartedDialog();
        }
        else if (error != DiaryErrorConstants.None)
        {
            ShowErrorDialog();
        }
    }

    private DateOnly Date => StateContainer.SelectedDate;

    /// <summary>
    /// Returns the diary sections for the selected date.
    /// </summary>
    private List<DiarySection> SelectedDiarySections => StateContainer.Diaries.Entries.SingleOrDefault(x => x.Key == StateContainer.SelectedDate).Value?.DiarySections ?? new List<DiarySection>();

    protected void ShowGettingStartedDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, MaxWidth = MaxWidth.Large };
        DialogService.Show<GettingStartedDialog>("Welcome!", options);
    }

    protected void ShowErrorDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", StateContainer.Error);
        parameters.Add("ButtonText", "Okay");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<SimpleDialog>("Error!", parameters, options);
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}