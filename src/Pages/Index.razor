@page "/"
@implements IDisposable
@inject StateContainer StateContainer
@inject IDiaryService DiaryService
@inject IDialogService DialogService
@inject IPreferences Preferences

<MudThemeProvider @ref="mudThemeProvider" IsDarkMode="isDarkMode" />
<MudDrawerContainer>
    <Sidebar />
    <div class="pa-4">
        <DiaryEntry />
    </div>
</MudDrawerContainer>

@code {
    private bool gettingStartedOpen = false;
    private MudThemeProvider mudThemeProvider;
    private bool isDarkMode = true;

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// Gets diaries from file.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
        DiaryService.GetDiaries();
    }

    /// <summary>
    /// Re-renders UI if dependencies have changed.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (gettingStartedOpen) // To not re-render the Getting Started dialog if it's actively open.
        {
            return;
        }
        await SetThemeAsync();

        string error = StateContainer.Error;
        if (StateContainer.FirstTime && error == DiaryErrorConstants.FileNotFound)
        {
            await ShowGettingStartedDialogAsync();
        }
        else if (error != DiaryErrorConstants.FileNotFound && error != DiaryErrorConstants.None)
        {
            ShowErrorDialog();
        }
    }

    /// <summary>
    /// Shows a dialog with getting started information if this is the first time a user
    /// opens the app.
    /// </summary>
    protected async Task ShowGettingStartedDialogAsync()
    {
        gettingStartedOpen = true;
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            CloseButton = false,
            DisableBackdropClick = true
        };
        var dialog = DialogService.Show<GettingStartedDialog>("Welcome!", options);
        await dialog.Result;
        gettingStartedOpen = false;
    }

    /// <summary>
    /// Shows a dialog displaying an error if one has occurred.
    /// </summary>
    protected void ShowErrorDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", StateContainer.Error);
        parameters.Add("ButtonText", "Okay");
        parameters.Add("Color", Color.Error);

        var dialog = DialogService.Show<SimpleDialog>("Error!", parameters);
    }

    /// <summary>
    /// Gets the theme either from the system or the preference, depending on preferences set.
    /// </summary>
    protected async Task SetThemeAsync()
    {
        bool newIsDarkMode;
        bool isDarkModePreference = Preferences.Get(PreferenceKeys.ThemeIsDarkMode, true);
        var useSystemTheme = Preferences.Get(PreferenceKeys.ThemeUseSystemTheme, true);
        if (useSystemTheme)
        {
            newIsDarkMode = await mudThemeProvider.GetSystemPreference();

            if (isDarkModePreference != newIsDarkMode)
            {
                Preferences.Set(PreferenceKeys.ThemeIsDarkMode, newIsDarkMode);
            }
        }
        else
        {
            newIsDarkMode = isDarkModePreference;
        }

        if (newIsDarkMode != isDarkMode)
        {
            isDarkMode = newIsDarkMode;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}