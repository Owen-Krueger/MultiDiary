@page "/"
@implements IDisposable
@inject StateContainer StateContainer
@inject IDiaryService DiaryService
@inject IDialogService DialogService

<MudThemeProvider IsDarkMode="isDarkMode" />
<MudDrawerContainer>
    <Sidebar />
    <div class="pa-4">
        <DiaryEntry />
    </div>
</MudDrawerContainer>

@code {
    private bool gettingStartedOpen = false;
    private bool isDarkMode = true;

    /// <summary>
    /// Subscribes to StateContainer changes.
    /// Gets diaries from file.
    /// </summary>
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
        DiaryService.GetDiaries();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (gettingStartedOpen) // To not re-render the Getting Started dialog if it's actively open.
        {
            return;
        }

        if (PreferenceUtilities.GetUpdatedPreference(ref isDarkMode, PreferenceKeys.ThemeIsDarkMode))
        {
            StateHasChanged(); // Needed so the component properly refreshes.
        }

        string error = StateContainer.Error;
        if (StateContainer.FirstTime && error == DiaryErrorConstants.FileNotFound)
        {
            await ShowGettingStartedDialogAsync();
        }
        else if (error != DiaryErrorConstants.FileNotFound && error != DiaryErrorConstants.None)
        {
            ShowErrorDialog();
        }
    }

    protected async Task ShowGettingStartedDialogAsync()
    {
        gettingStartedOpen = true;
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            CloseButton = false,
            DisableBackdropClick = true
        };
        var dialog = DialogService.Show<GettingStartedDialog>("Welcome!", options);
        await dialog.Result;
        gettingStartedOpen = false;
    }

    protected void ShowErrorDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", StateContainer.Error);
        parameters.Add("ButtonText", "Okay");
        parameters.Add("Color", Color.Error);

        var dialog = DialogService.Show<SimpleDialog>("Error!", parameters);
    }

    /// <summary>
    /// Unsubscribes from StateContainer changes.
    /// </summary>
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}